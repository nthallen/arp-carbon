%{
  /* qcli.tmc generated by gen_qcli.pl */
  #include "qclid.h"
  #include "sspdrv.h"
  const char * SSP_Status_Text(const unsigned char stat) {
    switch (stat) {
      case SSP_STATUS_GONE:    return "   Gone";
      case SSP_STATUS_CONNECT: return "Connect";
      case SSP_STATUS_READY:   return "  Ready";
      case SSP_STATUS_ARMED:   return "  Armed";
      case SSP_STATUS_TRIG:    return "Trigger";
      default:                 return "*******";
    }
  }
%}

TM typedef unsigned char SSP_Status_t { text "%7d" SSP_Status_Text(); }
TM typedef unsigned short XLONG { text "%5d"; }
TM typedef unsigned short QCLI_CS_t {
  text "%5d";
  collect x = sbrwa(x.address);
}

/* T_FPGA_t: MAX6628 output, resolution 1/16 degree
 *   reported as 128 bits per degree celcius */
TM typedef signed short T_FPGA_t { convert CELCIUS; text "%6.2lf"; }
Calibration ( T_FPGA_t, CELCIUS ) { 0, 0, 128, 1 }

/* T_HtSink_t: MAX6661 output. resolution 1/8 degree
  *  reported as 256 bits per degree */
TM typedef signed short T_HtSink_t { convert CELCIUS; text "%6.2lf"; }
Calibration ( T_HtSink_t, CELCIUS ) { 0, 0, 256, 1 }

TM "Receive" QCLI_C 1;

TM typedef unsigned short QCLI_C_Wave_t { text "%10d" QCLI_C_Wave_text(); }
TM 1 Hz QCLI_C_Wave_t QCLI_C_Wave;
TM 1 Hz UINT QCLI_C_s;
TM 1 Hz UINT QCLI_C_Stale;

Group QCLI_C_grp ( QCLI_C_Wave, QCLI_C_s ) {
  QCLI_C_Wave = QCLI_C.qcli_wave;
  QCLI_C_s = QCLI_C.status ^ 0x1000; /* flip laser bit */
  QCLI_C_Stale = QCLI_C_obj->stale();
  QCLI_C_obj->synch();
}
TM 1 HZ QCLI_CS_t QCLI_C_CS; Address QCLI_C_CS 0x1010;
TM "Receive" QCLI_M 1;

TM typedef unsigned short QCLI_M_Wave_t { text "%10d" QCLI_M_Wave_text(); }
TM 1 Hz QCLI_M_Wave_t QCLI_M_Wave;
TM 1 Hz UINT QCLI_M_s;
TM 1 Hz UINT QCLI_M_Stale;

Group QCLI_M_grp ( QCLI_M_Wave, QCLI_M_s ) {
  QCLI_M_Wave = QCLI_M.qcli_wave;
  QCLI_M_s = QCLI_M.status ^ 0x1000;
  QCLI_M_Stale = QCLI_M_obj->stale();
  QCLI_M_obj->synch();
}
TM 1 HZ QCLI_CS_t QCLI_M_CS; Address QCLI_M_CS 0x1000;

TM "Receive" QCLI_I 1;

TM typedef unsigned short QCLI_I_Wave_t { text "%10d" QCLI_I_Wave_text(); }
TM 1 Hz QCLI_I_Wave_t QCLI_I_Wave;
TM 1 Hz UINT QCLI_I_s;
TM 1 Hz UINT QCLI_I_Stale;

Group QCLI_I_grp ( QCLI_I_Wave, QCLI_I_s ) {
  QCLI_I_Wave = QCLI_I.qcli_wave;
  QCLI_I_s = QCLI_I.status ^ 0x1000;
  QCLI_I_Stale = QCLI_I_obj->stale();
  QCLI_I_obj->synch();
}
TM 1 HZ QCLI_CS_t QCLI_I_CS; Address QCLI_I_CS 0x1020;


TM "Receive" SSP_C 1;

TM 1 Hz L20 SSP_C_Num;
TM 1 Hz L20 SSP_C_SN;
TM 1 Hz L20 SSP_C_TS;
TM 1 Hz XLONG SSP_C_Flags;
TM 1 Hz SSP_Status_t SSP_C_Status;
TM 1 Hz UINT SSP_C_Stale;
TM 1 Hz T_FPGA_t SSP_C_T_FPGA;
TM 1 Hz T_HtSink_t SSP_C_T_HtSink;

Group SSP_C_grp ( SSP_C_Num, SSP_C_SN, SSP_C_TS, SSP_C_Flags,
		 SSP_C_T_FPGA, SSP_C_T_HtSink ) {
  SSP_C_Num = SSP_C.index;
  SSP_C_SN = SSP_C.ScanNum;
  SSP_C_TS = SSP_C.Total_Skip;
  SSP_C_Flags = SSP_C.Flags;
  SSP_C_Status = SSP_C.Status;
  SSP_C_T_FPGA = SSP_C.T_FPGA & 0xFFF8;
  SSP_C_T_HtSink = SSP_C.T_HtSink & 0xFFE0;
  SSP_C_Stale = SSP_C_obj->stale();
  SSP_C_obj->synch();
}
TM "Receive" SSP_M 1;

TM 1 Hz L20 SSP_M_Num;
TM 1 Hz L20 SSP_M_SN;
TM 1 Hz L20 SSP_M_TS;
TM 1 Hz XLONG SSP_M_Flags;
TM 1 Hz SSP_Status_t SSP_M_Status;
TM 1 Hz UINT SSP_M_Stale;
TM 1 Hz T_FPGA_t SSP_M_T_FPGA;
TM 1 Hz T_HtSink_t SSP_M_T_HtSink;

Group SSP_M_grp ( SSP_M_Num, SSP_M_SN, SSP_M_TS, SSP_M_Flags,
		 SSP_M_T_FPGA, SSP_M_T_HtSink ) {
  SSP_M_Num = SSP_M.index;
  SSP_M_SN = SSP_M.ScanNum;
  SSP_M_TS = SSP_M.Total_Skip;
  SSP_M_Flags = SSP_M.Flags;
  SSP_M_Status = SSP_M.Status;
  SSP_M_T_FPGA = SSP_M.T_FPGA & 0xFFF8;
  SSP_M_T_HtSink = SSP_M.T_HtSink & 0xFFE0;
  SSP_M_Stale = SSP_M_obj->stale();
  SSP_M_obj->synch();
}

TM "Receive" SSP_I 1;

TM 1 Hz L20 SSP_I_Num;
TM 1 Hz L20 SSP_I_SN;
TM 1 Hz L20 SSP_I_TS;
TM 1 Hz XLONG SSP_I_Flags;
TM 1 Hz SSP_Status_t SSP_I_Status;
TM 1 Hz UINT SSP_I_Stale;
TM 1 Hz T_FPGA_t SSP_I_T_FPGA;
TM 1 Hz T_HtSink_t SSP_I_T_HtSink;

Group SSP_I_grp ( SSP_I_Num, SSP_I_SN, SSP_I_TS, SSP_I_Flags,
     SSP_I_T_FPGA, SSP_I_T_HtSink ) {
  SSP_I_Num = SSP_I.index;
  SSP_I_SN = SSP_I.ScanNum;
  SSP_I_TS = SSP_I.Total_Skip;
  SSP_I_Flags = SSP_I.Flags;
  SSP_I_Status = SSP_I.Status;
  SSP_I_T_FPGA = SSP_I.T_FPGA & 0xFFF8;
  SSP_I_T_HtSink = SSP_I.T_HtSink & 0xFFE0;
  SSP_I_Stale = SSP_I_obj->stale();
  SSP_I_obj->synch();
}
