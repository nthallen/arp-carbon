%{
  #include "subbus.h"
%}
TM typedef double VOLTS { text "%6.3lf"; }
TM typedef double mVOLTS { text "%6.3lf"; }
TM typedef double AMPS  { text "%6.3lf"; }
TM typedef double PSIG { text "%6.1lf"; }
TM typedef double SLM { text "%6.3lf"; }
TM typedef double TORR { text "%7.3lf"; }
TM typedef double CELCIUS;
TM typedef double KELVIN;
TM typedef unsigned char  UCHAR { text "%3d"; }
TM typedef unsigned short UINT { text "%5d"; }
TM typedef unsigned short AIC  { text "%4x"; }
TM typedef unsigned char  DStat {
  text "%3u";
  collect x = sbrba(x.address);
}

TM typedef signed short AI16 {
  text "%7.4lf";
  convert VOLTS;
  collect x = sbrwa(x.address);
}
  Calibration (AI16,VOLTS) { 0, 0, 32768, 4.096 }

TM typedef AI16 PBI { text "%5.2lf"; convert AMPS; }
  Calibration (PBI,AMPS) { -800, .0218, 40000, 4.9831 }

TM typedef AI16 AI16_5V { text "%7.4lf"; convert VOLTS; }
  Calibration (AI16_5V, VOLTS) { 0, 0, 32768, 5.3333 }

/* AI16_20SLM 0-5V = 0-20 SLM. Channels need XP768 gain */
TM typedef AI16_5V AI_20SLM { text "%6.3lf"; convert SLM; }
  Calibration (AI_20SLM, SLM) { 0, 0, 30720, 20 }

/* AI16_5SLM 0-5V = 0-5 SLM. Channels need XP768 gain */
TM typedef AI16_5V AI_20SLM { text "%6.3lf"; convert SLM; }
  Calibration (AI_5SLM, SLM) { 0, 0, 30720, 5 }
  
TM typedef AI16 AI_T30K
  { text "%6.2lf"; convert CELCIUS; }
  /* Calibration in T30K75KU.tmc */

TM typedef AI16 AI_T1M250KU
  { text "%6.2lf"; convert CELCIUS; }
  /* Calibration in T1M250KU.tmc */

TM typedef AI16 AI_T1M1M
  { text "%6.2lf"; convert CELCIUS; }
  /* Calibration in T1M1M.tmc */
  
TM typedef AI16 AI_T30K250KU
  { text "%6.2lf"; convert CELCIUS; }
  /* Calibration in T30K250KU.tmc */

TM typedef AI16 AI_T1M75KU
  { text "%6.2lf"; convert CELCIUS; }
  /* Calibration in T1M75KU.tmc */

TM typedef AI_T1M250KU AI16_CCel1T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T1M250KU AI16_CCel2T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T1M250KU AI16_MCel1T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T30K AI16_MRv3T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T1M250KU AI16_ISk3T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T30K AI16_IRv2T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T30K AI16_IRv3T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T30K AI16_IRv4T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T30K AI16_IRv5T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T1M250KU AI16_MCel2T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T30K AI16_CSk1T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T30K AI16_CSk2T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T30K AI16_CSk3T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T30K AI16_CRv1T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T30K AI16_CRv2T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T30K AI16_CRv3T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T30K AI16_CRv4T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T30K AI16_CRv5T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T30K AI16_MSk1T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T30K AI16_MSk2T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T30K AI16_MSk3T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T30K AI16_MRv2T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T30K AI16_MRv4T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T30K AI16_MRv5T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T1M250KU AI16_ICel1T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T1M250KU AI16_ICel2T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T1M250KU AI16_ISk1T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T1M250KU AI16_ISk2T { text "%6.2lf"; convert CELCIUS; }
TM typedef AI_T30K AI16_IRv1T { text "%6.2lf"; convert CELCIUS; }

TM typedef AI16 AI_VigoT
  { text "%6.2lf"; convert KELVIN; }
  /* Calibration in VigoT.tmc */

TM typedef AI16_5V AI_2500psig { text "%6.1lf"; convert PSIG; }
  Calibration (AI_2500psig, PSIG) { 6155, 0, 30720, 2500 }

TM typedef AI16_5V AI_100psig { text "%6.1lf"; convert PSIG; }
  Calibration (AI_100psig, PSIG) { 6155, 0, 30720, 100 }

TM typedef AI16 P1000Torr { text "%7.3lf"; convert TORR; }
TM typedef AI16 P100Torr { text "%7.3lf"; convert TORR; }
TM typedef AI16 PC100Torr { text "%7.3lf"; convert TORR; }
TM typedef P1000Torr P1000Torr_C;
TM typedef P100Torr P100Torr_C;
TM typedef P1000Torr P1000Torr_M;
TM typedef P100Torr P100Torr_M;
TM typedef P1000Torr P1000Torr_I;
TM typedef P100Torr P100Torr_I;
  
TM typedef unsigned short AIStat_i {
  text "%012b";
  Collect x = sbrwa(x.address);
}

TM typedef unsigned short AO16 {
  text "%6.4lf";
  convert VOLTS;
  collect x = sbrwa(x.address);
}
  Calibration (AO16, VOLTS) { 0, 0, 65536, 10 }

TM typedef AO16 AO_20SLM { text "%6.3lf"; convert SLM; }
  Calibration (AO_20SLM, SLM) { 0, 0, 32768, 20 }

TM typedef AO16 AO_5SLM { text "%6.3lf"; convert SLM; }
  Calibration (AO_5SLM, SLM) { 0, 0, 32768, 5 }

TM typedef AO16 AO_PSt { text "%7.3lf"; convert TORR; }
  Calibration (AO_PSt, TORR) { 0, 0, 21845.1, 100 }

TM typedef unsigned char MS5607Db { text "%3d"; }
TM typedef UINT PTRH_S { text " %04x"; }
TM typedef double PTRHT_t { text "%5.1lf"; }
TM typedef double SHT21RH_t { text "%4.1lf"; }
TM typedef double PTRHP_t { text "%7.2lf"; }

/* QCLI/SSP types */
TM typedef long L20 { text "%8ld"; }

%{
  #define off_on_text(x) ((x)?" on":"off")
  #define Op_Cl_text(x) ((x)?"  open":"closed")
%}
TM typedef unsigned char off_on_t { text "%3d" off_on_text(); }
TM typedef unsigned char Op_Cl_t { text "%6d" Op_Cl_text(); }

/* Counter types */
%{
  #define CT24long(x) ((long)((x).low) + (((unsigned long)((x).high))<<16))
%}
TM typedef UINT CT16 { collect x = sbrwa( x.address ); }
TM typedef CT16 CTstat { text "%04x"; }

TM typedef struct {
  unsigned short low;
  unsigned char high;
} CT24 {
  text "%8ld";
  convert L20 CT24long();
}

/* Power Monitor types */
TM typedef unsigned short PwrMon_I {
  text "%5.2lf";
  collect x = sbrwa(x.address);
  convert mVOLTS;
}
Calibration (PwrMon_I,mVOLTS) { 0, 0, 16, 0.020 }

TM typedef unsigned short PwrMon_V {
  text "%7.3lf";
  collect x = sbrwa(x.address);
  convert VOLTS;
}
Calibration (PwrMon_V,VOLTS) { 0, 0, 16, 0.025 }

TM typedef unsigned char PwrMon_S {
  text "%3u";
  collect x = sbrba(x.address);
}

TM 1 Hz freemem_t freemem;
TM 0 Hz UINT Synch, MFCtr;
